#!/usr/bin/python

import argparse
import base64
import datetime
import email.utils
import socket
import ssl
import sys

sock = None
starttls = False


def recv(socky=None):
    global sock
    if socky is not None:
        sock = socky
    ret = sock.recv(4096)
    print(f"\033[1;34mRECV:\033[0;36m {ret.decode()}\033[0m")
    return ret.decode()


def send(msg, socky=None):
    global sock
    if socky is not None:
        sock = socky
    print(f"\033[1;34mSEND:\033[0;33m {msg}\033[0m")
    sock.send(f"{msg}\r\n".encode())


def send_mail_header():
    maildate = email.utils.format_datetime(datetime.datetime.now())
    msgid = email.utils.make_msgid(domain=ehlo)
    global starttls
    if not starttls:
        recv()

    send(f"EHLO {ehlo}")
    recv()

    if args.user and args.password:
        authplain = f"\x00{args.user}\x00{args.password}"
        b64 = base64.b64encode(authplain.encode()).decode()
        send(f"AUTH PLAIN {b64}")
        if not recv().startswith("2"):
            sys.exit("Authentication failed")

    send(f"MAIL FROM:<{args.mailfrom}>")
    r = recv()
    if not r.startswith("2"):
        sys.exit("Did not accept MAIL FROM")

    send(f"RCPT TO:<{args.to}>")
    r = recv()
    if not r.startswith("2"):
        sys.exit("Did not accept RCPT TO")

    send("DATA")
    recv()
    send(f"From: {args.mailfrom}")
    send(f"To: {args.to}")
    send("Subject: Hello World")
    send(f"Date: {maildate}")
    send(f"Message-ID: {msgid}")
    send("")


def test_badend(badend_value):
    send_mail_header()
    send(f"This is a test mail with an {repr(badend_value)} ending.")
    sock.send(badend_value.encode())
    try:
        ret = recv()
    except TimeoutError:
        print(f"Received timeout after 5 seconds when sending {repr(badend_value)}")
        print("Finishing mail with <CR><LF>.<CR><LF>")
        send(f"This is after a bad mail {repr(badend_value)} ending.")
        sock.send("\r\n.\r\n".encode())
        if recv().startswith("250 "):
            print(f"Successfully sent a mail with {repr(badend_value)} in it,")
            print("but not accepted as a mail end.")
            print("This probablby should've been rejected.")
            print("You should analyze the result on the receiving side.")
        return
    if ret.startswith("250 "):
        print(f"It appears {repr(badend_value)} was accepted (bad!)")
    else:
        print(
            f"It appears server did not accept {repr(badend_value)}, that's probably good."
        )


def test_pipelining():
    maildate = email.utils.format_datetime(datetime.datetime.now())
    msgid = email.utils.make_msgid(domain=ehlo)

    send_mail_header()
    send("This is mail 1/2 to test pipelining")
    sock.send("\r\n.\r\n".encode())
    send(f"MAIL FROM:<{args.mailfrom}>")
    send(f"RCPT TO:<{args.to}>")
    send("DATA")
    send(f"From: {args.to}")
    send(f"To: {args.to}")
    send("Subject: Hello World 2")
    send(f"Date: {maildate}")
    send(f"Message-ID: {msgid}")
    send("")
    send("This is mail 2/2 to test pipelining")
    sock.send("\r\n.\r\n".encode())
    r = recv()

    lines = r.splitlines()
    if len(lines) < 2:
        print("Server might not support pipelining")
        print("Check your email to see if it worked")
    elif lines[-1].startswith("5") or lines[-2].startswith("5"):
        print(
            "Server rejects bad protocol synchronization (if postfix: mitigation enabled)"
        )
    elif lines[-1].startswith("2"):
        print("Server accepts bad protocol synchronization")
    else:
        print("Unsure how to interpret answer")


ap = argparse.ArgumentParser()
ap.add_argument("host", nargs="?")
ap.add_argument("-f", "--mailfrom", default="alice@example.org")
ap.add_argument("-t", "--to", default="bob@example.org")
ap.add_argument("-e", "--ehlo", help="Takes local part of mailfrom if not passed")
ap.add_argument("-u", "--user", help="Authenticate with username")
ap.add_argument("-p", "--password", help="Authenticate with password")
ap.add_argument("-s", "--tls", action="store_true", help="TLS/SMTPS (port 465)")
ap.add_argument("-a", "--starttls", action="store_true", help="STARTTLS")
ap.add_argument("-c", "--test", default="lflf", help="Test to run")
ap.add_argument("--list-tests", action="store_true")
args = ap.parse_args()

tests = {
    "lflf": "\n.\n",
    "crcr": "\r.\r",
    "crlf": "\r.\n",
    "lfcr": "\n.\r",
    "nullbefore": "\r\n\x00.\r\n",
    "nullafter": "\r\n\x00.\r\n",
    "pipelining": "Test whether server supports pipelining (Postfix mitigation)",
}

if args.list_tests:
    for k, v in tests.items():
        if k == "pipelining":
            print(f'"{k}:": {v}')
        else:
            print(f'"{k}:": Send malformed {repr(v)} end of DATA symbol')
    sys.exit(0)

if not args.host:
    ap.print_help()
    sys.exit(0)

if args.test not in tests:
    sys.exit("Invalid test")

print(args)

if bool(args.user) != bool(args.password):
    sys.exit("Need both user and password for authentication")

if not args.ehlo:
    ehlo = args.mailfrom.split("@")[-1]
else:
    ehlo = args.ehlo


psock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
psock.settimeout(5)

if args.tls:
    psock.connect((args.host, 465))
    context = ssl.create_default_context()
    sock = context.wrap_socket(psock, server_hostname=args.host)
elif args.starttls:
    psock.connect((args.host, 587))
    context = ssl.create_default_context()
    send(f"EHLO {ehlo}", psock)
    recv(psock)
    recv(psock)
    send("STARTTLS", psock)
    r = recv(socky=psock)
    if not r.startswith("220 "):
        sys.exit("STARTTLS not accepted")
    sock = context.wrap_socket(psock, server_hostname=args.host)
    starttls = True
else:
    psock.connect((args.host, 25))
    sock = psock

if args.test == "pipelining":
    test_pipelining()
else:
    test_badend(tests[args.test])
